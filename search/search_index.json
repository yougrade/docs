{"config":{"lang":["en","de"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Yougrade","text":"<p>A scalable, secure, and language independent platform for automated grading of digital programming assignments.</p> <p>This project was developed as part of my bachelor thesis at the Technical University of Darmstadt.</p>"},{"location":"admin/","title":"Admin Guide","text":"<p>This guide is targeted for system administrators who are responsible for the installation and maintenance of the Yougrade platform.</p> Kiviat diagram showing the skills of the different user groups expected to use the system."},{"location":"admin/configuration/","title":"Configuration","text":""},{"location":"admin/configuration/#hub","title":"Hub","text":""},{"location":"admin/configuration/#environment-variables","title":"Environment Variables","text":"Name Description <code>DATABASE_URL</code> The URL of the database to connect to. <code>NEXT_PUBLIC_BASE_URL</code> The base URL of the Hub used for CORS. <code>NEXTAUTH_URL</code> The base URL used by NextAuth. In almost all cases, this should be the same as <code>NEXT_PUBLIC_BASE_URL</code>. <code>NEXT_PUBLIC_INTERNAL_BASE_URL</code> The base URL of the Hub used for internal requests. This is the URL passed to the Operator for internal requests. If you have an internal network, you can enter the internal IP address here to avoid unnecessary traffic on the public network. <code>OIDC_PROVIDER_NAME</code> The name of the OIDC provider. <code>OIDC_ISSUER</code> The issuer URL of the OIDC provider. <code>OIDC_AUTHORIZATION_URL</code> The authorization URL of the OIDC provider. <code>OIDC_TOKEN_URL</code> The token URL of the OIDC provider. <code>OIDC_USER_INFO_URL</code> The user info URL of the OIDC provider. <code>OIDC_CLIENT_ID</code> The client ID to use for the OIDC client. <code>OIDC_CLIENT_SECRET</code> The client secret of the OIDC client. <code>OIDC_CALLBACK_URL</code> The callback URL to submit to the OIDC provider. It should be the same as <code>NEXT_PUBLIC_BASE_URL</code> with <code>/api/auth/callback</code> appended, and should not have a trailing slash. <code>OIDC_SCOPE</code> The scope to request from the OIDC provider. Adjust these for OIDC group mappings, if desired. <code>NEXTAUTH_SECRET</code> The secret used by NextAuth. This should be a random string. <code>OPERATOR_URL</code> The internal URL of the Operator to connect to. This is used for the websockets connection. <code>OPERATOR_API_TOKEN</code> The API token used to authenticate with the Operator."},{"location":"admin/configuration/#operator","title":"Operator","text":"Name Description <code>NODE_ENV</code> The environment to run the Operator in. For development, use <code>development</code>. For production, use <code>production</code>. <code>OPERATOR_URL</code> The URL of the Operator used for CORS. <code>INTERNAL_OPERATOR_URL</code> The internal URL of the Operator used for internal requests. This is the URL passed to the grading containers. It is recommended to configure the network in a way, where the operator can be reached by the grading containers using this URL, but not from the public network. <code>MEMORY_LIMIT</code> The total memory limit for all grading containers combined. <code>MAX_CPU_CORES</code> The maximum number of CPU cores that can be used by all grading containers combined. <code>DATABASE_URL</code> The URL of the database to connect to. <code>HUB_TOKEN</code> The token that the Hub uses to authenticate with the Operator. Should be the same as the <code>OPERATOR_API_Token</code> in the Hub. Tip <p>Both the <code>HUB_TOKEN</code> and the <code>NEXTAUTH_SECRET</code> should be random strings. You can generate them using the following commands:</p> pwgenopenssl <pre><code>pwgen -sBv 64\n</code></pre> <pre><code>openssl rand -base64 32\n</code></pre> <p>Note that spaces and special characters might cause issues in some cases. Therefore, it is recommended to avoid them, if possible.</p>"},{"location":"admin/getting%20started/","title":"Getting started","text":"<p>This is a guide to help you get started with the project. It assumes that you have already installed the project.</p>"},{"location":"admin/getting%20started/#setup-open-id-connect-oidc-authentication","title":"Setup Open-ID Connect (OIDC) Authentication","text":"<p>The project uses Open-ID Connect (OIDC) for authentication. While this project does come with local authentication, it is recommended to use OIDC for production deployments. To setup OIDC, you need to create an OIDC client in your OIDC provider (e.g. Keycloak). The client should have the following settings:</p>"},{"location":"admin/installation/","title":"Installation","text":""},{"location":"admin/installation/#docker-compose","title":"Docker Compose","text":"Tip <p>This is the recommended way to run the application.</p>"},{"location":"admin/installation/#main-services","title":"Main services","text":"<p>The main components of the YouGrade system are the Hub and the Operator. The Hub is the frontend application that users interact with, while the Operator is the backend that manages the execution of tasks. Both components require a PostgreSQL database to store their data. Here is a sample <code>docker-compose.yml</code> file that starts the Hub, the Operator, and a PostgreSQL database: <pre><code>---\nservices:\n  db:\n    image: postgres:16\n    volumes:\n      - postgres-data:/var/lib/postgresql/data\n    environment:\n      - POSTGRES_USER=$POSTGRES_USER\n      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD\n      - POSTGRES_DB=$POSTGRES_DB\n    command: -c max_connections=2000\n    restart: unless-stopped\n    # ports:\n    #   - \"5432:5432\" # uncomment if you need outside database access\n  hub:\n    image: ghcr.io/yougrade/hub:latest\n    container_name: yougrade\n    environment:\n      - DATABASE_URL=postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@db:5432/$POSTGRES_DB_HUB?schema=public\n      - NEXT_PUBLIC_BASE_URL=$HUB_BASE_URL\n      - NEXTAUTH_URL=$HUB_BASE_URL\n      - NEXT_PUBLIC_INTERNAL_BASE_URL=$HUB_INTERNAL_BASE_URL\n      - OIDC_PROVIDER_NAME=$OIDC_PROVIDER_NAME\n      - OIDC_ISSUER=$OIDC_ISSUER\n      - OIDC_AUTHORIZATION_URL=$OIDC_AUTHORIZATION_URL\n      - OIDC_TOKEN_URL=$OIDC_TOKEN_URL\n      - OIDC_USER_INFO_URL=$OIDC_USER_INFO_URL\n      - OIDC_CLIENT_ID=$OIDC_CLIENT_ID\n      - OIDC_CLIENT_SECRET=$OIDC_CLIENT_SECRET\n      - OIDC_CALLBACK_URL=$HUB_BASE_URL/api/auth/callback\n      - OIDC_SCOPE=$OIDC_SCOPE\n      - NEXTAUTH_SECRET=$AUTH_SECRET\n      - OPERATOR_URL=http://operator:5000\n      - OPERATOR_API_TOKEN=$OPERATOR_API_TOKEN\n    restart: unless-stopped\n    # ports:\n    #   - \"3000:3000\" # Uncomment if you don't use a proxy network\n    volumes:\n      - \"uploads:/app/uploads\"\n    depends_on:\n      - db\n    networks:\n      - proxy # Uncomment if you don't use a proxy network\n      - default\n      - yougrade_operator_runners\n\n  operator:\n    image: ghcr.io/yougrade/operator-docker:latest\n    container_name: yougrade-operator\n    environment:\n      - DATABASE_URL=postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@db:5432/$POSTGRES_DB_OPERATOR?schema=public\n      - OPERATOR_URL=http://operator:5000\n      - INTERNAL_OPERATOR_URL=$INTERNAL_OPERATOR_URL\n      - MEMORY_LIMIT=$MEMORY_LIMIT\n      - MAX_CPU_CORES=$MAX_CPU_CORES\n      - HUB_TOKEN=$OPERATOR_API_TOKEN\n      - RUNNER_NETWORK_NAME=yougrade_operator_runners\n    restart: unless-stopped\n    volumes:\n      - \"/var/run/docker.sock:/var/run/docker.sock\"\n    depends_on:\n      - db\n    networks:\n      - default\n      - yougrade_operator_runners\n\nvolumes:\n  postgres-data:\n  uploads:\n\nnetworks:\n  yougrade_operator_runners:\n    name: \"yougrade_operator_runners\"\n    ipam:\n      config:\n        - subnet: 172.33.0.0/16 # adjust to your needs\n  proxy: # replace with your proxy network\n    external: true\n</code></pre></p> <p>This will deploy the application.</p>"},{"location":"admin/installation/#initializing-the-database","title":"Initializing the Database","text":"<p>Currently, it is required to initialize the database manually. Therefore, for both operator and hub, clone the repository, adjust the <code>DATABASE_URL</code> variable in the <code>.env</code> file, install the dependencies with <code>yarn install</code> and run the following commands: <pre><code>yarn generate\nprisma db push\n</code></pre> Then, just on the hub, also run <code>yarn db:seed</code> to populate the database with some example data.</p>"},{"location":"admin/installation/#grader-images","title":"Grader Images","text":"<p>For public docker images from docker hub or ghcr, you don't have to do anything. They will be pulled automatically when needed. If you want to use your own images however, you have to ensure that they are available on the host machine. For example, you can build the reference Jagr image by cloning the <code>feature/lab-runner</code> branch of the Jagr repository and building the image with: <pre><code>docker buildx build -t jagr-lab-runner:latest .\n</code></pre> Alternatively, you can build the image on a different system, and then export it with: <pre><code>docker image save jagr-lab-runner:latest | pigz &gt; jagr-lab-runner_latest.tar.gz\n</code></pre> and then import it on the host machine with: <pre><code>pigz -d -c jagr-lab-runner_latest.tar.gz | docker image load\n</code></pre></p>"},{"location":"admin/installation/#local-development","title":"Local Development","text":"<p>The local development is tailored towards VS-Code for Hub and Operator, and IntelliJ Idea for the Runner. It can be adapted to other IDEs though. The following steps are required to set up the local development environment:</p> <ul> <li>clone the Jagr repository</li> <li>build the image with <code>docker buildx build -t jagr-lab-runner:latest .</code></li> <li>clone the hub and operator</li> <li>create a docker network for the runners with  <pre><code>docker network create --subnet=172.21.0.0/16 --gateway=172.21.0.1 yougrade_operator_runners\n</code></pre></li> <li>(adjust the subnet to your needs)</li> <li>start the database with <code>docker compose -f docker-compose.dev.yml up -d</code> in the hub repository</li> <li>for each:<ul> <li>install the recommended vscode extensions (see the <code>.vscode/extensions.json</code> file)</li> <li>install the dependencies with <code>yarn install</code></li> <li>populate the <code>.env</code> files</li> <li>populate the database with <code>yarn generate</code> and <code>prisma db push</code></li> <li>on the hub only, run <code>yarn db:seed</code> to populate the database with some example data</li> <li>run the application with <code>yarn dev</code></li> </ul> </li> </ul>"},{"location":"instructor/","title":"Instructor guide","text":"<p>This guide is targeted for instructors who want to grade assignments for their respective courses using the Yougrade platform.</p> Kiviat diagram showing the skills of the different user groups expected to use the system."},{"location":"instructor/Quick%20start/","title":"Quick start","text":""},{"location":"instructor/Quick%20start/#introduction","title":"Introduction","text":"<p>After you login to the system, you will be directed to the dashboard. The dashboard is the first page you will see after you login. In the navigation bar, you will see the following options:</p> <ul> <li>Dashboard</li> <li>Courses</li> <li>Jobs</li> <li>Admin</li> </ul>"},{"location":"instructor/Quick%20start/#courses","title":"Courses","text":"<p>For now, we will focus on the Courses option. Click on the Courses option to view the list of courses you are enrolled in. You can also see other courses that are available for you to enroll in.</p> <p>Let's create a course. Click on the Create Course button. You will be directed to a page where you can fill in the details of the course:</p> Field Description Course Name The name of the course Course Description An optional, brief description of the course Course Icon An optional icon for the course Owner The owner of the course. By default, you are the owner of the course Term The term in which the course is being offered Allow Self Enrollment If enabled, students can enroll themselves in the course <p>Fill in the details and click on the Create button. You will be directed to the course page where you can add assignments and manage course members.</p>"},{"location":"instructor/Quick%20start/#assignments","title":"Assignments","text":"<p>Now that you have created a course, let's add an assignment. Click on the Add Assignment button. You will be directed to a page where you can fill in the details of the assignment:</p> Field Description Assignment Name The name of the assignment Assignment Description An optional, brief description of the assignment Due Date The due date of the assignment. In the future, scheduled assignments will be supported and graded automatically <p>Next, you have to choose a Grading Workflow:</p> Field Description Workflow Name The name of the workflow Workflow Description An optional, brief description of the workflow Docker Image The Docker image that will be used to grade the assignment. Currently, this image has to be setup by the administrator, and should only be set to the default value. If you want to use a custom image, please contact the administrator. Test Files The test files that will be used to grade the assignment. The format is described below. Schedule Workflow If enabled, the workflow will be scheduled to run automatically (Currently not supported) Container Start Timeout The maximum time the container can take to start. If the container does not start within this time, the workflow will be marked as failed. Container Stop Timeout The maximum time the container can take to stop. Container Exec Timeout The maximum time the container can take to execute the grading script. Container Cleanup Timeout The maximum time the container can take to clean up. Container Result Upload Timeout The maximum time the container can take to upload the results. Allocated Memory The amount of memory allocated to the container. Note that tests might fail if the container does not have enough memory. Allocated CPU Cores The number of CPU cores allocated to the container. Priority The priority of the workflow. Lower values have higher priority."},{"location":"instructor/Quick%20start/#test-files","title":"Test Files","text":"<p>The test files can be any format depending on the grading container. For the default <code>Jagr</code>-based container, the test files be a zip archive containing the following files:</p> test-files.zip<pre><code>.\n\u251c\u2500\u2500 \ud83d\udcc2 graders\n\u2502   \u251c\u2500\u2500 \ud83d\udce6 HXX-Private-0.1.0-SNAPSHOT.jar\n\u251c\u2500\u2500 \ud83d\udcc2 libs\n\u2502   \u251c\u2500\u2500 \ud83d\udce6 HXX-Private-0.1.0-SNAPSHOT-libs.jar\n\u251c\u2500\u2500 \ud83d\udcc4 jagr.conf\n</code></pre>"},{"location":"instructor/Quick%20start/#submissions","title":"Submissions","text":"<p>After you have created an assignment, you can now import the submissions from Moodle. Therefore, on moodle, navigate to Course administration &gt; Reports &gt; Task overview. Click on the task you want to import the submissions from. Only select <code>submissions</code> as we do not need any existing feedback. Finally, click on the <code>Download files</code> button. You will get a zip archive containing the submissions.</p> <p>You can also create your own archive, but it has to be in the following format (the filename of the archive does not matter, but the files inside have to be named as follows):</p> submissions.zip<pre><code>.\n\u251c\u2500\u2500 \ud83d\udcc2 Abgabe zu \u00dcbungsblatt XX _ Firstname Lastname - ab12cdef\n\u2502   \u251c\u2500\u2500 \ud83d\udcc2 submissions\n\u2502       \u251c\u2500\u2500 \ud83d\udce6 &lt;anyName&gt;.jar\n\u251c\u2500\u2500 \ud83d\udcc2 Abgabe zu \u00dcbungsblatt XX _ Firstname2 Lastname2 - bc23defg\n\u2502   \u251c\u2500\u2500 \ud83d\udcc2 submissions\n\u2502       \u251c\u2500\u2500 \ud83d\udce6 &lt;anyName2&gt;.jar\n..\n</code></pre> Hint <p>The <code>submissions</code> folder is mandatory and has to be named exactly like that. The <code>&lt;anyName&gt;.jar</code> files can be named anything, but they have to be in the <code>submissions</code> folder. To be precise, only files matching <pre><code>/Abgabe[^0-9]*(?&lt;assignmentId&gt;[0-9]{1,2}) _ (?&lt;name&gt;[^-]*) - (?&lt;studentId&gt;[a-z]{2}[0-9]{2}[a-z]{4})\\/submissions\\/.*\\.jar/\n</code></pre> will be imported. The <code>assignmentId</code> is the number of the assignment, the <code>name</code> is the name of the student, and the <code>studentId</code> is the student's id.</p> <p>Now in Yougrade, click on the <code>Import Submissions</code> button. You will be prompted to upload the zip archive. After you have uploaded the archive, the submissions will be imported and you can start grading.</p> Hint <p>Manually refresh the page if the submissions are not displayed immediately.</p>"},{"location":"instructor/Quick%20start/#grading","title":"Grading","text":"<p>After you have imported the submissions, you can start grading. Either click the <code>Grade all submissions</code> button to grade all submissions at once, select the submissions you want to grade, and click the <code>Grade selected submissions</code> button, or click on the <code>Grade</code> button next to a submission to grade it individually. To track the status of the grading, you can click on the <code>Jobs</code> option in the navigation bar.</p> <p>When the grading is finished, you should see the results of the grading in the table. For each submission, you can view a detailed report by clicking on the <code>View</code> button.  </p>"},{"location":"instructor/Quick%20start/#exporting-grades","title":"Exporting Grades","text":"<p>You can export either the grades of a single assignment or all assignments. To export the grades of a single assignment, click on the <code>View</code> button of the assignment you want to export and then click on the <code>Export CSV</code> button. To export the grades of all assignments, click on the <code>Export CSV</code> button in the Assignment's page.</p>"},{"location":"instructor/Quick%20start/#uploading-grades-to-moodle","title":"Uploading Grades to Moodle","text":"<p>After you have exported the grades, you can upload them to Moodle. Therefore, navigate to the assignment page, click on <code>Show grades</code> &gt; <code>Actions</code> &gt; <code>Upload grade table</code>. Select the exported CSV file and click on the <code>Upload this file</code> button. The grades will be uploaded to Moodle.</p> Hint <p>This process has not been verified to work for larger courses yet. It might be necessary to split the CSV file into smaller parts.</p>"},{"location":"de/","title":"Yougrade","text":"<p>Eine skalierbare, sichere und sprachunabh\u00e4ngige Plattform zur automatischen Bewertung digitaler Programmieraufgaben.</p> <p>Dieses Projekt wurde im Rahmen meiner Bachelorarbeit an der Technischen Universit\u00e4t Darmstadt entwickelt.</p>"}]}